/*
 * Коротко говоря, это p2p file exchange protocol. Хотя и не совсем filе, не совсем exchange.
 * Караван здесь не просто метафора, удобное название, наоборот это название используется в прямом смысле,
 * просто подразумеваются караваны электронные, сетевые караваны. 
 * Караван состоит из:
 * - караванов, которые куда-то следуют и что-нибудь переносят. 
 * - верблюдов, составные части караванов, способны что-то нести.
 * - сараев, места пересечения караванов, перегузки с одного на другой чего-нибудь
 * - конечные точки, возможно это также сараи, но назовём эти точки людьми
 */

/*
 * установить точки входа, своеобразный bootstrap, использует конфиг, который получен при изначальной
 * загрузке приложения и добавлениях, сделанных во время работы приложения. В отличие от bootstap, данный
 * механизм остаётся активным в течении всего времени работы приложения. Иными словами входные точки постоянно
 * ищуются и обновляются. Это залог актуальности и эффективности. Также таким образом накаливается информация
 * необходимая для последующих _успешных_ установлений точек входа.
 * 
 */

caravan.entry_points_finder_start();

/*
 * Прокладывание пути до конечной точки. Конечная точка - это адрес. Подобно обычным географическим адресам,
 * да только они не географические. Пока это просто должно быть что-то _обязятельно_ удобное для чтения и
 * записи человеком. Например: "вася пупкин из серова".
 * Логика работы прокладивания пути полностью протовоположная всяким торам, где главное скрыть количество
 * промежуточных узлов и их связи. Здесь же наоборот, посылаются запросы по всем возможным каналам в поисках
 * адреса, считываютя ответы. Во всех ответах содержится: промежуточные узлы, их адреса и время доставки
 * между узлами. Эта информация используется для прокладки оптимальных путей. Выбыраются те ответы, где
 * минимум промежуточных узлов и минимальное время доставки. Могут быть выбраны несколько путей.
 * 
 */
/*
 * Все find_ возвращают array, где элементы массива это массивы вида [ { address, time }, {address,time}]
 */

caravan.find_path(address);

/*
 * Найти что-нибудь, какой-нибудь объект. Работает так же как нахождение пути, но ищется не адрес, а объект
 * некоторого типа по определённому запросу.
 */

caravan.find_thing(request);

/*
 * Найти место для объекта. Работает точно также, как и нахождение пути, но находится путь не до че-то с
 * конкретным адресом, а до кого-то, кто может хранить нужный объект нужного размера. Допустим когда вам
 * нужн сохранить где-нибудь фильм. В общем это по сути найти сарай.
 */

caravan.find_saray(type, size);

/*
 * Найти посредника. Работает также, как и нахождение пути. Но ищем мы того, кто может доставить что-то кому-то
 * по адресу. По сути ищется караван. Нужно когда, нам необходимо доставить кому-то например письмо, но сейчас
 * он не доступен, а вы не можете быть доступны всегда, чтобы застукать человека в сети.  
 */

caravan.find_caravansaray(address_to);

/*
 * Отправить что-нибудь по определённому адресу
 */
caravan.add(path, object);

/*
 * Получить что-нибудь из определённого адреса(адресом может быть и конечная точна и сарай)
 */
caravan.request(path, request);

/*
 * Положить что-нибудь по определённому пути. Работает для случаев, когда нашли сарай и хотите что-нибудь туда
 * положить
 */
saray.put(path, object);

/*
 * Добавить что-нибудь к каравансараю, который найден через find_caravansaray.
 */
caravansaray.add(path, object);


//Пример как найти что-нибудь и скачать
caravan.find_thing("fifth element.avi", function(link){
		       link.download("videos/fifth element.avi");
});

//Пример как послать что-нибудь, даже если никого нет дома
caravan.find_path("Мой лучший друг", function(link){
		      if(link)
			  link.upload("videos/fifth element.avi");
		      else 
			  caravan.find_caravan("Мой лучший друг", function(caravan){
						   caravan.add("Мой лучший друг", "videos/fifth element");
					       });
});

//Пример как положить что-нибудь куда-нибудь до востребования

caravan.find_saray("video", "2gb", function(saray){
		      saray.upload("videos/fifth element.avi"); 
		   });
