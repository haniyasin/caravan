* dsa - distributed service arhitecture. Набор инструментов для создания и обслуживания распредёленных сервисов. Базируется на  технологиях: 
+ capsule - в качестве базиса для фукнционирования в разных средах - браузерах, в виде обычных приложений, в виде мидлетов на мобильниках, анроид приложений и тд
+ dsa.mq - для взаимодействия сервисов  
+ json(для всего, что только можно:) 
+ node.js(для написания сервисов)
+ mongodb(для хранения всевозможных данных сервисов)

**Инструменты

*** [[wiki/tools.builder][builder]]
+ создаёт файлы реализаций по интроспеции
+ упаковывает в готовый пакет(один js файл) интрпоспекции, файла реализации и манифеста
*** [[wiki/tools.installer][install]]
+ устанавливает готовый пакет в выбранный, функционирующий узел dsa
+ удаляет установленный пакет с выбранного, функционирующего узла dsa

** Сервисы

*** [[manager]]
Управляющий сервисами, обращение к нему происходит всякий раз, когда необходимо получить или завершить работу с тем или иным сервисом. 

*** [[ui]]
Набор сервисов. Различные сервисы реализуют различные аспекты взаимодействия с пользователям. Но все они базируются на использовании capsule.compositer, как способ абстракции от конкретной графической системы. Главная задача ui группы сервисов - обеспечить разработчика легко соединяемыми блоками, из которых можно строить интерфейс любой сложности(от простых форм и статических вёрсток, до сложнейших анимаций и сцен). Эта группа сервисов имеют протоколы взаимодействия, благодаря которым, блоки можно выстраивать в любых комбинациях как с помощью написания кода, так и с помощью визуального редактора. В отличие от других способов визуального программирования, ui сервисы dsa созданы не только для оформления, но и для программирования логики работы ui.

** [[document]]
Предоставляет возможности постоянного хранения данных в виде древовидной структуры документов. Является по сути документоориентированной базой данных, но с сильно упрощённым интерфейсом для разработчика. Главная задача - хранения всех _не временных_ данных других сервисов в этой базе. Таким образом в перспективе реализация любого сервиса не должна хранить какие бы то ни было данные в своих глобальных структурах данных(по отношению к программе сервиса), за исключением действительно локальных данных(например переменных и структур данных внутри блоков кода(функций, каллбеков и тд). 

