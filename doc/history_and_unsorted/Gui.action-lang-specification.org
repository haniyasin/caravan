* Action lang
 это язык описания `action_object`ов. 
** Пример описания такого объекта:

```javascript
{
    "catch" : "first_state",
    "throw" : "second_state",
    "chain" : [
        {
            'duration' : '10sec',
            'actions' : [
                {"x" : "+10"},
                {"y" : "+10"}
            ]
        },
        {
            'duration' : '20sec',
            'actions' :[
                {"scale" : "+10%"},
                {"rotate" : "+20"}
            ]
        }
    ],

    "code" = "
    var newx, newy;
    if (this.position.x == 20)
        newx = 30;
    if (this.position.y == 30
        newy = 40;
    aobj.catch = 'second_state';
    aobj.twrow = 'third_state';
    aobj.chain = [{'duration' : 10},
                  'actions' : [
                                'x' : newx,
                                'y' : newy
                              ]
                 ];
    action_object_create(aobj);
    "
}
```
** Свойства action_object:

+ `catch` - содержит список состояний, на которые реагирует `action_object`

+ `throw` - список порождаемых состояний этим `action_object`

+ `chain` - цепочка действий, содержит объекты-группы, которые могут объединять одно и более действие с общим временем исполнения

+ `code` - код на javascript, имеющий доступ к action_object creation api, таким образом он может порождать и уничтожать другие action_object. Этот код также имеет доступ к api для работы с деревом ui элементов. Подробнее - [[gui.js]]

`action_object` считается приемлемым, если в нём есть хотя бы одно из свойств : `throw`, `chain`, `code`. Иными словами, `action_object` может порождать состояния, совершать действия и выполнять код как каждое из этих вариантов по одиночке, так и в любых комбинациях. Поэтому могут быть объекты, только порождающие состояния, так и объекты, содержащие только некоторый код, содержащий логику.

Свойство `catch` является опциональным. Если оно не указано, то объект должен быть выполнен так скоро, как это возможно(определяется реализацией на своё усмотрение, вплоть до выполнения в удобное время:D), при этом, выполнение происходит в контексте, в котором `action_object` был создан. Вот пример возможных контекстов:

+ контекст элемента ui. 
    Когда `action_object` был определён в пределах некоторого элемента ui в ui описании или путём добавления в дерево ui из js кода.

+ контекс js кода
   Когда `action_object` был создан в коде js, но при этом не был добавлен в дерево, а инициирован путём вызова метода `create` в корне, то есть `ui.create`. В этом случае новосозданный `action_object` наследует тот контекст, в котором выполнялся порождивший его js код.

Беcконтекстного `action_object` быть _не может_, это лишено смысла, это нарушает концепции `chain`(потому что нельзя совершить действия ни над чем:D), `throw`(потому что нельзя определить состояние для воздуха) и `code`(строго говоря не нарушает, вы просто не смогли бы сохранять данные от вызова к вызову, но если вам это может понадобиться - вы делаете что-то не так, это точно!)

* Действия в в цепочке действий - это свойства, в понимании properties в OOП. Существуют следующие категории свойств:

*** базовые свойства элемента ui
 Изменение тех свойств, что определены для каждого элемента ui в отдельности. Например text для label или text у button. При этом могут использоваться _только_ свойства имеющие простой тип, то есть number или string. Для изменения всех других свойств необходимо использовать секцию `code`. Если же вам всё таки захотелось изменения сложных свойств- вы делаете что-то неправильно. На время, пока это черновик, ещё поразмышляю, стоит ли оставлять базовые свойства вообще или полностью выкинуть их, пусть из `code` меняют.
*** визуальные свойства
+ opacity - прозрачность, определяется в единицах. 100 - полностью непрозрачно, 0 - наоборот
+ scale - масштабирование. Увеличение или уменьшение в разах:D. То есть 1.5 будет увеличенное в полтора раза.  
*** стилевые свойства 
*** геометрические свойства
+ width - ширина. В пикселях или процентах. Например: 100p - 100 пикселей, 20% - двадцать процентов. Проценты определяются относительно родительского контейнера.
+ height - высота. Определяется аналогично ширине
+ rotate - поворот. В градусах. При этом отрицательное значение даёт обратный поворот. Например: -180 поворачивает стрелку часов с 12 до 6 назад на часах:)
*** свойства позиционирования
+ x - позиция элемента по ширине. В пикселях или процентах. Например: 10p - десять пикселей, 10% - тут по сложнее. Допустим у нас есть всего 100 пикселей. И вот мы указали нашему элементу позицию по x на 10%, это значит, что он будет находится на 10 пикселей.
+ y - позиция элемента по высоте. Аналогично x.
+ z - позиция элемента по глубине, аналогично x.
+ z-index - В единицах. Означает нахождение элемента на том или ином слое. Например: 2 - будет значить на втором слое